{"version":3,"sources":["assets/routes.ts","assets/database.ts","common/detailPage/view.tsx","pages/groupDetails/view.tsx","pages/groupsTable/data.tsx","common/samplePage/view.tsx","pages/groupsTable/view.tsx","pages/groupsTable/container.tsx","pages/userDetails/view.tsx","pages/usersTable/data.tsx","pages/usersTable/view.tsx","pages/usersTable/container.tsx","pages/tagsTable/data.ts","pages/tagsTable/view.tsx","pages/productsTable/data.ts","pages/productsTable/view.tsx","pages/selectionSample/data.tsx","pages/selectionSample/view.tsx","pages/selectionSample/container.tsx","pages/serverSample/data.ts","common/utils/general.ts","pages/serverSample/fakeClient.ts","common/loader/view.tsx","pages/serverSample/view.tsx","pages/serverSample/container.tsx","pages/headerSample/data.tsx","pages/headerSample/view.tsx","pages/personDetails/view.tsx","pages/serverHeaderSample/fakeClient.ts","pages/serverHeaderSample/data.tsx","pages/serverHeaderSample/view.tsx","pages/serverHeaderSample/container.tsx","pages/masterSample/columns.tsx","pages/masterSample/countries.ts","pages/masterSample/data.tsx","pages/masterSample/view.tsx","pages/styleOverridesSample/data.ts","pages/styleOverridesSample/view.tsx","entry/view.tsx","reportWebVitals.ts","index.tsx"],"names":["ROUTES","id","ID_PARAM_PLACEHOLDER","database","users","userName","displayName","dateJoined","Date","getTime","groupId","groups","name","description","tags","color","products","price","dateAdded","people","age","dateOfBirth","favColor","bio","correspondingUserId","income","DetailPage","entityName","dbKey","columns","useParams","history","useHistory","model","find","x","className","data","onClick","goBack","GroupDetalis","propertyPath","headerText","type","DataType","PLAIN_TEXT","RICH_TEXT","CUSTOM","render","group","to","isSortable","sortAccessor","defaultSortDirection","SortDirection","ASCENDING","isResizable","defaultWidth","NUMBER","SamplePage","children","GroupsTableView","pluralEntityName","GroupsTableContainer","hydratedGroups","map","g","numUsers","filter","u","length","UserDetalis","DATE","showTime","user","RELATION","relatedDataList","relatedGroup","UsersTableView","href","target","rel","UsersTableContainer","COLOR","TagsTable","numPinnedColumns","canReorderColumns","MONEY","ProductsTable","minNumRows","showResultCount","usePaging","defaultPageSize","pageSizeOptions","SelectionSampleView","useState","isButtonDisabled","setButtonDisabled","onRowSelected","alert","_","allSelections","keepSelections","disabled","SelectionSampleContainer","getNestedValue","obj","path","replace","split","reduce","o","k","properPageData","currentPageIndex","pageSize","dataInCurrentPage","slice","now","fakeClient","fetchProducts","params","Promise","resolve","setTimeout","sortingRules","rules","unsortedData","sortedData","forEach","rule","sort","a","b","aData","columnDefinition","bData","localeCompare","direction","DESCENDING","reverse","fakeServerSort","pageIndex","totalNumPages","Math","ceil","totalNumResults","Loader","ServerSampleView","props","useServerSideSorting","useServerSidePaging","onPage","onSort","isLoading","loader","canSortMultipleColumns","ServerSampleContainer","setData","setLoading","currParams","useRef","setTotalNumPages","setTotalNumResults","doFetch","current","then","response","useEffect","currentSortingRules","row","searchMatcher","searchTerm","part","join","toLowerCase","includes","CustomFilterType","TEXT","matcher","value","placeholder","filterType","FilterType","EXACT_MATCH","RANGED","relatedData","_row","relatedDataItem","DROPDOWN","options","text","isMultiple","HeaderSample","isSearchable","tableName","isFilterable","PersonDetalis","showSeconds","FAKE_RESULT","message","searchPeople","fakeResult","hasSearchTerm","numFilters","Object","keys","filters","hasFilters","ServerHeaderSampleView","useServerSideSearching","onSearch","useServerSideFiltering","onFilter","ServerHeaderSampleContainer","currentFilters","PARTIAL_MATCH","parseInt","plainText","isRanged","min","max","MINIMUM","MAXIMUM","filterIsMultiple","countries","code","MIN_RANDOM_DATE","MAX_RANDOM_DATE","generateRandomDate","random","generateRandomNumber","n","round","Number","EPSILON","pickRandomFromArray","arr","floor","peopleIds","p","Array","from","i","randomCountry","richText","relation","date","exact","custom","numberMin","numberMax","numberRanged","moneyMin","moneyMax","toString","MasterSample","showFilteredResultCount","PopulatedTable","StyleOverridesSample","Entry","basename","component","UsersTable","GroupsTable","SelectionSample","ServerHeaderSample","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1b6526b.chunk.js","sourcesContent":["export const ROUTES = {\n  usersTable: '/users',\n  groupsTable: '/groups',\n  tagsTable: '/tags',\n  productsTable: '/products',\n  selectionSample: '/selection',\n  serverSample: '/server',\n  headerSample: '/header',\n  serverHeaderSample: '/serverHeader',\n  masterSample: '/masterSample',\n  userDetails: (id: string) => `/user/${id}`,\n  groupDetails: (id: string) => `/group/${id}`,\n  personDetails: (id: string) => `/person/${id}`,\n  styleSample: '/styles'\n}\n\nexport const ID_PARAM_PLACEHOLDER = ':id'\n","import { GroupModel } from '../domain/group.model'\nimport { PersonModel } from '../domain/person.model'\nimport { ProductModel } from '../domain/product.model'\nimport { TagModel } from '../domain/tag.model'\nimport { UserModel } from '../domain/user.model'\n\n// Fake document DB\nexport interface Database {\n  users: UserModel[]\n  groups: GroupModel[]\n  tags: TagModel[]\n  products: ProductModel[]\n  people: PersonModel[]\n}\n\nexport const database: Database = {\n  users: [\n    {\n      id: '1',\n      userName: 'user1',\n      displayName: 'User 1',\n      dateJoined: new Date(2021, 1, 2, 8, 30, 22).getTime(),\n      groupId: '1',\n    },\n    {\n      id: '2',\n      userName: 'user2',\n      displayName: 'User 2',\n      dateJoined: new Date(2021, 3, 15, 9, 50, 30).getTime(),\n      groupId: '2',\n    },\n    {\n      id: '3',\n      userName: 'iHaveAName',\n      displayName: 'Some Person',\n      dateJoined: new Date(2021, 5, 1, 10, 15, 5).getTime(),\n      groupId: '2',\n    },\n  ],\n  groups: [\n    {\n      id: '1',\n      name: 'Group 1',\n      description: 'I exist',\n    },\n    {\n      id: '2',\n      name: 'Amazing group',\n      description: \"We're great join us.<br />Also we have an <b>actual name</b>\",\n    },\n    {\n      id: '3',\n      name: 'Group three',\n      description: '<i>Rich text</i> support',\n    },\n  ],\n  tags: [\n    {\n      id: '1',\n      name: 'Tag 1',\n      color: 'red',\n      description: 'I am a tag',\n    },\n    {\n      id: '2',\n      name: 'Tag 2',\n      color: 'green',\n      description: 'This tag is green',\n    },\n    {\n      id: '3',\n      name: 'Tag 3',\n      color: 'blue',\n      description: 'Great tag',\n    },\n  ],\n  products: [\n    {\n      id: '1',\n      name: 'Book',\n      description: 'Random book',\n      price: 30,\n      dateAdded: new Date(2021, 1, 2, 8, 30, 22).getTime(),\n    },\n    {\n      id: '2',\n      name: 'Cheese',\n      description: 'Very delicious',\n      price: 75360.57,\n      dateAdded: new Date(2021, 3, 30, 17, 28, 32).getTime(),\n    },\n    {\n      id: '3',\n      name: 'Mystery',\n      description: 'Buy it',\n      price: 20.99,\n      dateAdded: new Date(2021, 4, 12, 10, 35, 53).getTime(),\n    },\n    {\n      id: '4',\n      name: 'Item 4',\n      description: 'This is an item',\n      price: 50,\n      dateAdded: new Date(2021, 3, 30, 17, 28, 32).getTime(),\n    },\n    {\n      id: '5',\n      name: 'Item 5',\n      description: 'Hurray',\n      price: 50,\n      dateAdded: new Date(2021, 3, 30, 17, 28, 32).getTime(),\n    },\n    {\n      id: '6',\n      name: 'Item 6',\n      description: 'Commerce',\n      price: 50,\n      dateAdded: new Date(2021, 3, 30, 17, 28, 32).getTime(),\n    },\n  ],\n  people: [\n    {\n      id: '1',\n      name: 'John Doe',\n      age: 30,\n      dateOfBirth: new Date(1990, 9, 5).getTime(),\n      favColor: 'blue',\n      bio: 'Hi guys <b><i>I exist</i></b>',\n      correspondingUserId: '1',\n      income: 12345,\n    },\n    {\n      id: '12',\n      name: 'Jane Doe',\n      age: 20,\n      dateOfBirth: new Date(1993, 8, 3).getTime(),\n      favColor: 'green',\n      bio: 'Did not bother to match DoB to the age',\n      correspondingUserId: '2',\n      income: 85000,\n    },\n    {\n      id: '23',\n      name: 'Some Person',\n      age: 53,\n      dateOfBirth: new Date(1995, 4, 20).getTime(),\n      favColor: 'pink',\n      bio: 'asdf',\n      correspondingUserId: '3',\n      income: 2.99,\n    },\n  ],\n}\n","import { Table, TableColumn } from '@nokacreative/generic-react-table'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport './styles.scss'\n\nimport { IdRouteParams } from '../models'\nimport { database, Database } from '../../assets/database'\n\ntype Props<T> = {\n  entityName: string\n  dbKey: keyof Database\n  columns: TableColumn<T>[]\n}\n\nexport function DetailPage<T>({ entityName, dbKey, columns }: Props<T>) {\n  const { id } = useParams<IdRouteParams>()\n  const history = useHistory()\n\n  const model = (database[dbKey] as any[]).find((x) => x.id === id)\n\n  if (!model) {\n    return <div>Could not find {entityName}!</div>\n  }\n\n  return (\n    <div className=\"detail-page\">\n      <header>\n        <h1>\n          {entityName} {id}\n        </h1>\n      </header>\n      <Table columns={columns} data={[model]} />\n      <button className=\"primary\" onClick={() => history.goBack()} id=\"ok-button\">\n        OK\n      </button>\n    </div>\n  )\n}\n","import { DataType } from '@nokacreative/generic-react-table'\nimport React from 'react'\n\nimport { DetailPage } from '../../common/detailPage'\n\nexport const GroupDetalis = () => {\n  return (\n    <DetailPage\n      entityName=\"Group\"\n      dbKey=\"groups\"\n      columns={[\n        {\n          propertyPath: 'name',\n          headerText: 'Name',\n          type: DataType.PLAIN_TEXT,\n        },\n        {\n          propertyPath: 'description',\n          headerText: 'Description',\n          type: DataType.RICH_TEXT,\n        },\n      ]}\n    />\n  )\n}\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { ROUTES } from '../../assets/routes'\r\nimport { TableColumn, DataType, SortDirection } from '@nokacreative/generic-react-table'\r\nimport { HydratedGroupModel } from './models'\r\n\r\nexport const columns: TableColumn<HydratedGroupModel>[] = [\r\n  {\r\n    headerText: 'Name',\r\n    type: DataType.CUSTOM,\r\n    render: (group: HydratedGroupModel) => (\r\n      <Link to={ROUTES.groupDetails(group.id)}>{group.name}</Link>\r\n    ),\r\n    isSortable: true,\r\n    sortAccessor: (group: HydratedGroupModel) => group.name,\r\n    defaultSortDirection: SortDirection.ASCENDING,\r\n    isResizable: true,\r\n    defaultWidth: '200px',\r\n  },\r\n  {\r\n    propertyPath: 'description',\r\n    headerText: 'Rich Description',\r\n    type: DataType.RICH_TEXT,\r\n    isResizable: true,\r\n  },\r\n  {\r\n    propertyPath: 'numUsers',\r\n    headerText: '# Users',\r\n    type: DataType.NUMBER,\r\n    isSortable: true,\r\n    defaultWidth: '0.5fr',\r\n  },\r\n]\r\n","import './styles.scss'\n\ntype Props = {\n  headerText: string\n  description: React.ReactNode\n  children: React.ReactNode\n}\n\nexport const SamplePage = ({ headerText, description, children }: Props) => (\n  <div className=\"sample-page\">\n    <header>\n      <h1>{headerText}</h1>\n      <div className=\"description\">{description}</div>\n    </header>\n    {children}\n  </div>\n)\n","import React from 'react'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { columns } from './data'\r\nimport { HydratedGroupModel } from './models'\r\nimport { SamplePage } from '../../common/samplePage'\r\n\r\ntype Props = {\r\n  groups: HydratedGroupModel[]\r\n}\r\n\r\nexport const GroupsTableView = ({ groups }: Props) => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Column Sorting and Resizing Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            The <em>Name</em> and <em># Users</em> columns are sortable, and the last two\r\n            columns are resizable. This sample demonstrates single column sort, but it is\r\n            possible to sort by multiple columns; see the server-side sample.\r\n          </p>\r\n          <p>\r\n            To resize a column, hover over its edge, and the resize handle will appear.\r\n          </p>\r\n          <p>\r\n            There is also a default width and growth ratio applied to the first column.\r\n            <em># Users</em> uses a numeric column type to ensure that sorting occurs\r\n            numerically, instead of as a string.\r\n          </p>\r\n        </>\r\n      }\r\n    >\r\n      <Table pluralEntityName=\"groups\" columns={columns} data={groups} />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { database } from '../../assets/database'\r\nimport { HydratedGroupModel } from './models'\r\nimport { GroupsTableView } from './view'\r\n\r\nexport const GroupsTableContainer = () => {\r\n  // In a real app, users and groups can be retrieved from the server, the state, etc.\r\n  const hydratedGroups: HydratedGroupModel[] = database.groups.map((g) => ({\r\n    ...g,\r\n    numUsers: database.users.filter((u) => u.groupId === g.id).length,\r\n  }))\r\n  return <GroupsTableView groups={hydratedGroups} />\r\n}\r\n","import { DataType } from '@nokacreative/generic-react-table'\nimport React from 'react'\n\nimport { DetailPage } from '../../common/detailPage'\n\nexport const UserDetalis = () => {\n  return (\n    <DetailPage\n      entityName=\"User\"\n      dbKey=\"users\"\n      columns={[\n        {\n          propertyPath: 'userName',\n          headerText: 'Username',\n          type: DataType.PLAIN_TEXT,\n        },\n        {\n          propertyPath: 'displayName',\n          headerText: 'Display Name',\n          type: DataType.PLAIN_TEXT,\n        },\n        {\n          propertyPath: 'dateJoined',\n          headerText: 'Date Joined',\n          type: DataType.DATE,\n          showTime: true,\n        },\n        {\n          propertyPath: 'groupId',\n          headerText: 'Group ID',\n          type: DataType.PLAIN_TEXT,\n        },\n      ]}\n    />\n  )\n}\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { ROUTES } from '../../assets/routes'\r\nimport { TableColumn, DataType } from '@nokacreative/generic-react-table'\r\nimport { GroupModel } from '../../domain/group.model'\r\nimport { UserModel } from '../../domain/user.model'\r\n\r\nexport const columns = (groups: GroupModel[]): TableColumn<UserModel>[] => [\r\n  {\r\n    headerText: 'User Name',\r\n    type: DataType.CUSTOM,\r\n    render: (user: UserModel) => (\r\n      <Link to={ROUTES.userDetails(user.id)}>{user.userName}</Link>\r\n    ),\r\n  },\r\n  {\r\n    propertyPath: 'displayName',\r\n    headerText: 'Display Name',\r\n    type: DataType.PLAIN_TEXT,\r\n  },\r\n  {\r\n    propertyPath: 'groupId',\r\n    headerText: 'Group',\r\n    type: DataType.RELATION,\r\n    relatedDataList: groups,\r\n    render: (relatedGroup: GroupModel) => (\r\n      <Link to={ROUTES.groupDetails(relatedGroup.id)}>{relatedGroup.name}</Link>\r\n    ),\r\n  },\r\n  {\r\n    propertyPath: 'dateJoined',\r\n    headerText: 'Date Joined',\r\n    type: DataType.DATE,\r\n    showTime: true,\r\n    defaultWidth: 'max-content',\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { GroupModel } from '../../domain/group.model'\r\nimport { UserModel } from '../../domain/user.model'\r\nimport { columns } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\n\r\ntype Props = {\r\n  users: UserModel[]\r\n  groups: GroupModel[]\r\n}\r\n\r\nexport const UsersTableView = ({ users, groups }: Props) => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Simple (static) Table Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            Plain text, date, and custom (link-rendering) columns are displayed here. Date\r\n            columns can choose whether to display the time or not.\r\n          </p>\r\n          By default, columns will size themselves to be at least as large as the\r\n          smallest-sized content. Column widths can be customized with any{' '}\r\n          <a\r\n            href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            Grid Layout\r\n          </a>{' '}\r\n          property. In this example, the <em>Date Joined</em> column is given the largest\r\n          possible size in regards to its content.\r\n        </>\r\n      }\r\n    >\r\n      <Table pluralEntityName=\"users\" columns={columns(groups)} data={users} />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { database } from '../../assets/database'\r\nimport { UsersTableView } from './view'\r\n\r\nexport const UsersTableContainer = () => {\r\n  // In a real app, users and groups can be retrieved from the server, the state, etc.\r\n  return <UsersTableView users={database.users} groups={database.groups} />\r\n}\r\n","import { TableColumn, DataType } from '@nokacreative/generic-react-table'\r\nimport { TagModel } from '../../domain/tag.model'\r\n\r\nexport const columns: TableColumn<TagModel>[] = [\r\n  {\r\n    propertyPath: 'id',\r\n    headerText: 'ID',\r\n    type: DataType.PLAIN_TEXT,\r\n    defaultWidth: '80px',\r\n  },\r\n  {\r\n    propertyPath: 'name',\r\n    headerText: 'Name',\r\n    type: DataType.PLAIN_TEXT,\r\n  },\r\n  {\r\n    propertyPath: 'color',\r\n    headerText: 'Colour',\r\n    type: DataType.COLOR,\r\n    defaultWidth: '100px',\r\n  },\r\n  {\r\n    propertyPath: 'description',\r\n    headerText: 'Description',\r\n    type: DataType.PLAIN_TEXT,\r\n    defaultWidth: '2fr',\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { columns } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\nimport { database } from '../../assets/database'\r\n\r\nexport const TagsTable = () => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Pinned Columns and Column Reordering Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            The <em>ID</em> column is pinned here, meaning it will stay in place even if\r\n            the screen is resized, while everything else scrolls. The number of pinned\r\n            columns can be customized. All other columns can be reordered.\r\n          </p>\r\n          <p>The Colour column type is also shown.</p>\r\n        </>\r\n      }\r\n    >\r\n      <Table\r\n        pluralEntityName=\"tags\"\r\n        columns={columns}\r\n        data={database.tags}\r\n        numPinnedColumns={1}\r\n        canReorderColumns\r\n      />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import { TableColumn, DataType } from '@nokacreative/generic-react-table'\r\nimport { ProductModel } from '../../domain/product.model'\r\n\r\nexport const columns: TableColumn<ProductModel>[] = [\r\n  {\r\n    propertyPath: 'id',\r\n    headerText: 'ID',\r\n    type: DataType.PLAIN_TEXT,\r\n    defaultWidth: '70px',\r\n  },\r\n  {\r\n    propertyPath: 'name',\r\n    headerText: 'Name',\r\n    type: DataType.PLAIN_TEXT,\r\n  },\r\n  {\r\n    propertyPath: 'description',\r\n    headerText: 'Description',\r\n    type: DataType.PLAIN_TEXT,\r\n  },\r\n  {\r\n    propertyPath: 'price',\r\n    headerText: 'Price',\r\n    type: DataType.MONEY,\r\n    defaultWidth: 'min-content',\r\n  },\r\n  {\r\n    propertyPath: 'dateAdded',\r\n    headerText: 'Date Added',\r\n    type: DataType.DATE,\r\n    showTime: true,\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { columns } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\nimport { database } from '../../assets/database'\r\n\r\nexport const ProductsTable = () => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Minimum Number of Rows and Paging Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            A minimum number of rows forces the table to have a minimum number of rows--5\r\n            in this case. Useful for keeping the table a consistent length when paging.\r\n          </p>\r\n          <p>\r\n            Page size options are customizable. The dropdown will not show up if size\r\n            options are not given.\r\n          </p>\r\n          The Money column type and number of results text is also shown here.\r\n        </>\r\n      }\r\n    >\r\n      <Table\r\n        pluralEntityName=\"products\"\r\n        columns={columns}\r\n        data={database.products}\r\n        minNumRows={5}\r\n        showResultCount\r\n        usePaging\r\n        defaultPageSize={5}\r\n        pageSizeOptions={[1, 2, 5, 10]}\r\n      />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { ROUTES } from '../../assets/routes'\r\nimport { TableColumn, DataType } from '@nokacreative/generic-react-table'\r\nimport { GroupModel } from '../../domain/group.model'\r\nimport { UserModel } from '../../domain/user.model'\r\n\r\nexport const columns = (groups: GroupModel[]): TableColumn<UserModel>[] => [\r\n  {\r\n    headerText: 'User Name',\r\n    type: DataType.CUSTOM,\r\n    render: (user: UserModel) => (\r\n      <Link to={ROUTES.userDetails(user.id)}>{user.userName}</Link>\r\n    ),\r\n  },\r\n  {\r\n    propertyPath: 'displayName',\r\n    headerText: 'Display Name',\r\n    type: DataType.PLAIN_TEXT,\r\n  },\r\n  {\r\n    propertyPath: 'groupId',\r\n    headerText: 'Group',\r\n    type: DataType.RELATION,\r\n    relatedDataList: groups,\r\n    render: (relatedGroup: GroupModel) => (\r\n      <Link to={ROUTES.groupDetails(relatedGroup.id)}>{relatedGroup.name}</Link>\r\n    ),\r\n  },\r\n  {\r\n    propertyPath: 'dateJoined',\r\n    headerText: 'Date Joined',\r\n    type: DataType.DATE,\r\n  },\r\n]\r\n","import React, { useState } from 'react'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { GroupModel } from '../../domain/group.model'\r\nimport { UserModel } from '../../domain/user.model'\r\nimport { columns } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\n\r\ntype Props = {\r\n  users: UserModel[]\r\n  groups: GroupModel[]\r\n}\r\n\r\nexport const SelectionSampleView = ({ users, groups }: Props) => {\r\n  const [isButtonDisabled, setButtonDisabled] = useState<boolean>(true)\r\n\r\n  function onUserSelected1(user: UserModel) {\r\n    alert(`You have selected the user with ID ${user.id}, name ${user.userName}`)\r\n  }\r\n\r\n  function onUserSelected2(_: UserModel, allSelections: UserModel[]) {\r\n    setButtonDisabled(allSelections.length === 0)\r\n  }\r\n\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Row Selection Sample\"\r\n      description=\"A custom function can be called when a row is selected. The first table shows a one-off selection (eg. fire and forget).\"\r\n    >\r\n      <Table\r\n        pluralEntityName=\"users\"\r\n        columns={columns(groups)}\r\n        data={users}\r\n        onRowSelected={onUserSelected1}\r\n      />\r\n      <p>The selections can also be kept and toggled.</p>\r\n      <Table\r\n        pluralEntityName=\"users\"\r\n        columns={columns(groups)}\r\n        data={users}\r\n        onRowSelected={onUserSelected2}\r\n        keepSelections\r\n      />\r\n      <button\r\n        className=\"primary\"\r\n        disabled={isButtonDisabled}\r\n        onClick={() => alert('Congrats!')}\r\n      >\r\n        {isButtonDisabled ? 'Enabled when selections exist' : 'Enabled'}\r\n      </button>\r\n    </SamplePage>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { database } from '../../assets/database'\r\nimport { SelectionSampleView } from './view'\r\n\r\nexport const SelectionSampleContainer = () => {\r\n  // In a real app, users and groups can be retrieved from the server, the state, etc.\r\n  return <SelectionSampleView users={database.users} groups={database.groups} />\r\n}\r\n","import { TableColumn, DataType, SortDirection } from '@nokacreative/generic-react-table'\r\nimport { ProductModel } from '../../domain/product.model'\r\n\r\nexport const DEFAULT_PAGE_SIZE = 5\r\n\r\nexport const columns: TableColumn<ProductModel>[] = [\r\n  {\r\n    propertyPath: 'id',\r\n    headerText: 'ID',\r\n    type: DataType.NUMBER,\r\n    defaultWidth: '70px',\r\n    isSortable: true,\r\n    defaultSortDirection: SortDirection.ASCENDING,\r\n  },\r\n  {\r\n    propertyPath: 'name',\r\n    headerText: 'Name',\r\n    type: DataType.PLAIN_TEXT,\r\n    isSortable: true,\r\n  },\r\n  {\r\n    propertyPath: 'description',\r\n    headerText: 'Description',\r\n    type: DataType.PLAIN_TEXT,\r\n  },\r\n  {\r\n    propertyPath: 'price',\r\n    headerText: 'Price',\r\n    type: DataType.MONEY,\r\n    isSortable: true,\r\n  },\r\n  {\r\n    propertyPath: 'dateAdded',\r\n    headerText: 'Date Added',\r\n    type: DataType.DATE,\r\n    isSortable: true,\r\n  },\r\n]\r\n","export function getNestedValue(obj: any, path: string) {\n  return path\n    .replace(/\\[/g, '.')\n    .replace(/\\]/g, '')\n    .split('.')\n    .reduce((o, k) => ((o || {}) as any)[k], obj)\n}\n\nexport function setNestedValue(obj: any, path: string, value: any) {\n  if (obj === undefined) return obj\n  const pathParts = path.toString().match(/[^.[\\]]+/g) || []\n  pathParts\n    .slice(0, -1)\n    .reduce(\n      (a, c) => (Object(a[c]) === a[c] ? a[c] : (a[c] = !Number.isNaN(c) ? [] : {})),\n      obj\n    )[pathParts[pathParts.length - 1]] = value\n  return obj\n}\n\nexport function debounce<F extends (...args: any[]) => any>(func: F, waitFor: number) {\n  let timeout: NodeJS.Timeout\n  return (...args: Parameters<F>) =>\n    new Promise<ReturnType<F>>((resolve) => {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n      timeout = setTimeout(() => resolve(func(...args)), waitFor)\n    })\n}\n\nexport function objectIsEmpty(obj: any) {\n  return Object.keys(obj).length === 0\n}\n","import { database } from '../../assets/database'\nimport { DataType, SortDirection, SortingRule } from '@nokacreative/generic-react-table'\nimport { getNestedValue } from '../../common/utils/general'\nimport { ProductModel } from '../../domain/product.model'\nimport { ServerResponse, ServerSearchParams } from './models'\n\nfunction fakeServerSort<ProductModel>(\n  rules: SortingRule<ProductModel>[],\n  unsortedData: ProductModel[]\n) {\n  const sortedData = unsortedData.slice()\n  rules.forEach((rule) => {\n    sortedData.sort((a: ProductModel, b: ProductModel) => {\n      const aData = rule.columnDefinition.sortAccessor\n        ? rule.columnDefinition.sortAccessor(a)\n        : getNestedValue(a, (rule.columnDefinition as any).propertyPath)\n      const bData = rule.columnDefinition.sortAccessor\n        ? rule.columnDefinition.sortAccessor(b)\n        : getNestedValue(b, (rule.columnDefinition as any).propertyPath)\n      if (rule.columnDefinition.type === DataType.PLAIN_TEXT) {\n        return aData.localeCompare(bData)\n      }\n      return aData - bData\n    })\n    if (rule.direction === SortDirection.DESCENDING) {\n      sortedData.reverse()\n    }\n  })\n  return sortedData\n}\n\nfunction properPageData(\n  products: ProductModel[],\n  currentPageIndex: number,\n  pageSize: number\n): ProductModel[] {\n  const dataInCurrentPage = products.slice(\n    currentPageIndex * pageSize,\n    (currentPageIndex + 1) * pageSize\n  )\n  if (currentPageIndex === 1) {\n    return [\n      ...dataInCurrentPage,\n      {\n        id: '101',\n        name: 'Added from server',\n        price: 100,\n        description:\n          'To demonstrate server-side paging--note that the total number of results is still 6, which means that this server needs tweaking!',\n        dateAdded: Date.now(),\n      },\n    ]\n  }\n  return dataInCurrentPage\n}\n\nfunction fetchProducts(params: ServerSearchParams) {\n  return new Promise<ServerResponse>((resolve) => {\n    setTimeout(() => {\n      const products = (() => {\n        if (params.sortingRules.length > 0) {\n          return fakeServerSort(params.sortingRules, database.products)\n        }\n        return database.products\n      })()\n      resolve({\n        products: properPageData(products, params.pageIndex, params.pageSize),\n        totalNumPages: Math.ceil(products.length / params.pageSize),\n        totalNumResults: 6,\n      })\n    }, 1000)\n  })\n}\n\nexport const fakeClient = {\n  fetchProducts,\n}\n","import './styles.scss'\n\nexport const Loader = () => <div className=\"loader\">Loading...</div>\n","import React from 'react'\r\n\r\nimport { SortingRule, Table } from '@nokacreative/generic-react-table'\r\nimport { columns, DEFAULT_PAGE_SIZE } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\nimport { ProductModel } from '../../domain/product.model'\r\nimport { Loader } from '../../common/loader'\r\n\r\ntype Props = {\r\n  data: ProductModel[]\r\n  onSort: (currentSortingRules: SortingRule<ProductModel>[]) => void\r\n  onPage: (pageIndex: number, pageSize: number) => void\r\n  totalNumPages: number\r\n  totalNumResults: number\r\n  isLoading: boolean\r\n}\r\n\r\nexport const ServerSampleView = (props: Props) => (\r\n  <SamplePage\r\n    headerText=\"Server-side Paging and Sorting Sample\"\r\n    description={\r\n      <>\r\n        <p>\r\n          Use <code>useServerSideSorting</code> and <code>onSort()</code> to run sorting\r\n          on the server side. The loader is a custom element that can be specified per\r\n          table.\r\n        </p>\r\n        <p>\r\n          Server side paging is set independently of sorting, using{' '}\r\n          <code>useServerSidePaging</code> and <code>onPage()</code>. To demonstrate that\r\n          all paging-related data comes from the server, the second page will return more\r\n          than 6 results,\r\n        </p>\r\n        This demo uses a fake server with a faked latency of 1 second. It also allows\r\n        sorting by multiple columns.\r\n      </>\r\n    }\r\n  >\r\n    <Table\r\n      pluralEntityName=\"products\"\r\n      columns={columns}\r\n      data={props.data}\r\n      minNumRows={5}\r\n      showResultCount\r\n      usePaging\r\n      defaultPageSize={DEFAULT_PAGE_SIZE}\r\n      useServerSideSorting\r\n      useServerSidePaging\r\n      onPage={props.onPage}\r\n      totalNumPages={props.totalNumPages}\r\n      totalNumResults={props.totalNumResults}\r\n      onSort={props.onSort}\r\n      isLoading={props.isLoading}\r\n      loader={<Loader />}\r\n      pageSizeOptions={[2, 3, 5]}\r\n      canSortMultipleColumns\r\n    />\r\n  </SamplePage>\r\n)\r\n","import React, { useEffect, useRef, useState } from 'react'\n\nimport { SortingRule } from '@nokacreative/generic-react-table'\nimport { ProductModel } from '../../domain/product.model'\nimport { DEFAULT_PAGE_SIZE } from './data'\nimport { fakeClient } from './fakeClient'\nimport { ServerResponse, ServerSearchParams } from './models'\nimport { ServerSampleView } from './view'\n\nexport const ServerSampleContainer = () => {\n  const [data, setData] = useState<ProductModel[]>([])\n  const [isLoading, setLoading] = useState<boolean>(true)\n  const currParams = useRef<ServerSearchParams>({\n    sortingRules: [],\n    pageIndex: 0,\n    pageSize: DEFAULT_PAGE_SIZE,\n  })\n  const [totalNumPages, setTotalNumPages] = useState<number>(0)\n  const [totalNumResults, setTotalNumResults] = useState<number>(0)\n\n  function doFetch() {\n    fakeClient.fetchProducts(currParams.current).then((response: ServerResponse) => {\n      setData(response.products)\n      setTotalNumPages(response.totalNumPages)\n      setTotalNumResults(response.totalNumResults)\n      setLoading(false)\n    })\n  }\n\n  useEffect(() => {\n    doFetch()\n  }, [])\n\n  function onSort(currentSortingRules: SortingRule<ProductModel>[]) {\n    setLoading(true)\n    currParams.current.sortingRules = currentSortingRules\n    doFetch()\n  }\n\n  function onPage(pageIndex: number, pageSize: number) {\n    setLoading(true)\n    currParams.current.pageIndex = pageIndex\n    currParams.current.pageSize = pageSize\n    doFetch()\n  }\n\n  return (\n    <ServerSampleView\n      data={data}\n      onSort={onSort}\n      isLoading={isLoading}\n      onPage={onPage}\n      totalNumPages={totalNumPages}\n      totalNumResults={totalNumResults}\n    />\n  )\n}\n","import { Link } from 'react-router-dom'\r\nimport { database } from '../../assets/database'\r\nimport { ROUTES } from '../../assets/routes'\r\nimport {\r\n  TableColumn,\r\n  DataType,\r\n  FilterType,\r\n  CustomFilterType,\r\n} from '@nokacreative/generic-react-table'\r\nimport { PersonModel } from '../../domain/person.model'\r\nimport { UserModel } from '../../domain/user.model'\r\n\r\nexport const columns: TableColumn<PersonModel>[] = [\r\n  {\r\n    headerText: 'ID',\r\n    type: DataType.CUSTOM,\r\n    defaultWidth: '100px',\r\n    render: (row: PersonModel) => <Link to={ROUTES.personDetails(row.id)}>{row.id}</Link>,\r\n    searchMatcher: (row: PersonModel, searchTerm: string) => {\r\n      const initials = row.name\r\n        .split(' ')\r\n        .map((part) => part[0])\r\n        .join('')\r\n        .toLowerCase()\r\n      return initials.includes(searchTerm)\r\n    },\r\n    filter: {\r\n      type: CustomFilterType.TEXT,\r\n      matcher: (value: string, row: PersonModel) => row.id.includes(value),\r\n      placeholder: 'Contains',\r\n    },\r\n  },\r\n  {\r\n    propertyPath: 'name',\r\n    headerText: 'Name',\r\n    type: DataType.PLAIN_TEXT,\r\n    filterType: FilterType.EXACT_MATCH,\r\n  },\r\n  {\r\n    propertyPath: 'age',\r\n    headerText: 'Age',\r\n    type: DataType.NUMBER,\r\n    defaultWidth: '100px',\r\n    filterType: FilterType.EXACT_MATCH,\r\n  },\r\n  {\r\n    propertyPath: 'dateOfBirth',\r\n    headerText: 'Date of Birth',\r\n    type: DataType.DATE,\r\n    defaultWidth: '160px',\r\n    filterType: FilterType.RANGED,\r\n  },\r\n  {\r\n    propertyPath: 'favColor',\r\n    headerText: 'Favourite Colour',\r\n    type: DataType.COLOR,\r\n  },\r\n  {\r\n    propertyPath: 'income',\r\n    headerText: 'Annual Income',\r\n    type: DataType.MONEY,\r\n    filterType: FilterType.RANGED,\r\n  },\r\n  {\r\n    propertyPath: 'bio',\r\n    headerText: 'Bio',\r\n    type: DataType.RICH_TEXT,\r\n    defaultWidth: 'minmax(220px, 2fr)',\r\n  },\r\n  {\r\n    propertyPath: 'correspondingUserId',\r\n    headerText: 'Corresponding User',\r\n    type: DataType.RELATION,\r\n    relatedDataList: database.users,\r\n    render: (relatedData: UserModel) => (\r\n      <Link to={ROUTES.userDetails(relatedData.id)}>{relatedData.userName}</Link>\r\n    ),\r\n    searchMatcher: (_row: PersonModel, searchTerm: string, relatedDataItem: UserModel) =>\r\n      relatedDataItem.userName.toLowerCase().includes(searchTerm),\r\n    filter: {\r\n      type: CustomFilterType.DROPDOWN,\r\n      options: [\r\n        { text: 'In Group 1', value: '1' },\r\n        { text: 'In Group 2', value: '2' },\r\n      ],\r\n      isMultiple: true,\r\n      matcher: (value: string[], _row: PersonModel, relatedDataItem: UserModel) =>\r\n        value.includes(relatedDataItem.groupId),\r\n    },\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport './styles.scss'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { columns } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\nimport { database } from '../../assets/database'\r\n\r\nexport const HeaderSample = () => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Search and Filter Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            Search is a simple text-based search across all table rows. A custom search\r\n            matcher can be specified, demonstrated in the <em>ID</em> column here, where\r\n            only the initials generated off the name (ex. JD, SP) causes a match, and the\r\n            ID text itself is not used.\r\n          </p>\r\n          <p>\r\n            Filtering is specific and column-based. Each column&apos;s data type affects\r\n            the type of filter that is generated, and can be further configured:\r\n          </p>\r\n          <ul>\r\n            <li>Custom columns can specify the type of filter to be used.</li>\r\n            <li>\r\n              Text filters can specify whether to use an exact or partial match, and\r\n              numeric and date filters can specify whether to use an exact match, ranged\r\n              control, minimum threshold, or maxmimum threshold.\r\n            </li>\r\n            <li>\r\n              The render method of each option in a Dropdown filter can be customized, as\r\n              well as whether or not multiple selections are selected.\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            The debounce time of search and filter inputs can be customized; it defaults\r\n            to 200ms.\r\n          </p>\r\n        </>\r\n      }\r\n    >\r\n      <Table\r\n        pluralEntityName=\"people\"\r\n        columns={columns}\r\n        data={database.people}\r\n        isSearchable\r\n        tableName=\"People\"\r\n        showResultCount\r\n        isFilterable\r\n      />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import { DataType } from '@nokacreative/generic-react-table'\nimport React from 'react'\n\nimport { DetailPage } from '../../common/detailPage'\n\nexport const PersonDetalis = () => {\n  return (\n    <DetailPage\n      entityName=\"Person\"\n      dbKey=\"people\"\n      columns={[\n        {\n          propertyPath: 'name',\n          headerText: 'Name',\n          type: DataType.PLAIN_TEXT,\n        },\n        {\n          propertyPath: 'age',\n          headerText: 'Age',\n          type: DataType.NUMBER,\n        },\n        {\n          propertyPath: 'dateOfBirth',\n          headerText: 'Date of Birth',\n          type: DataType.DATE,\n          showTime: true,\n          showSeconds: true,\n        },\n        {\n          propertyPath: 'favColor',\n          headerText: 'Favourite Colour',\n          type: DataType.COLOR,\n        },\n        {\n          propertyPath: 'bio',\n          headerText: 'Bio',\n          type: DataType.RICH_TEXT,\n        },\n        {\n          propertyPath: 'income',\n          headerText: 'Income',\n          type: DataType.MONEY,\n        },\n      ]}\n    />\n  )\n}\n","import { database } from '../../assets/database'\nimport { PersonModel } from '../../domain/person.model'\nimport { ServerResponse, ServerSearchParams } from './models'\n\nconst FAKE_RESULT = (message: string): PersonModel[] => [\n  {\n    id: 'fake',\n    name: 'From Server',\n    age: 1000,\n    dateOfBirth: new Date().getTime(),\n    favColor: 'orange',\n    bio: `${message} This fake result comes from the server.`,\n    correspondingUserId: '1',\n    income: 500,\n  },\n]\n\nfunction searchPeople(params: ServerSearchParams) {\n  return new Promise<ServerResponse>((resolve) => {\n    setTimeout(() => {\n      const fakeResult = (() => {\n        const hasSearchTerm = params.searchTerm.length > 0\n        const numFilters = Object.keys(params.filters).length\n        const hasFilters = numFilters > 0\n        if (hasSearchTerm && hasFilters) {\n          return FAKE_RESULT(\n            `You have searched for <b>\"${params.searchTerm}\"</b> and applied ${numFilters} filter(s)!`\n          )\n        }\n        if (hasSearchTerm) {\n          return FAKE_RESULT(`You have searched for <b>\"${params.searchTerm}\"</b>!`)\n        }\n        if (hasFilters) {\n          return FAKE_RESULT(`You have applied ${numFilters} filter(s)!`)\n        }\n        return database.people\n      })()\n      resolve({\n        people: fakeResult,\n        totalNumResults: database.people.length,\n      })\n    }, 1000)\n  })\n}\n\nexport const fakeClient = {\n  searchPeople,\n}\n","import { Link } from 'react-router-dom'\r\nimport { database } from '../../assets/database'\r\nimport { ROUTES } from '../../assets/routes'\r\nimport {\r\n  TableColumn,\r\n  DataType,\r\n  FilterType,\r\n  CustomFilterType,\r\n} from '@nokacreative/generic-react-table'\r\nimport { PersonModel } from '../../domain/person.model'\r\nimport { UserModel } from '../../domain/user.model'\r\n\r\nexport const columns: TableColumn<PersonModel>[] = [\r\n  {\r\n    headerText: 'ID',\r\n    type: DataType.CUSTOM,\r\n    defaultWidth: '100px',\r\n    render: (row: PersonModel) => <Link to={ROUTES.personDetails(row.id)}>{row.id}</Link>,\r\n    searchMatcher: (row: PersonModel, searchTerm: string) => {\r\n      const initials = row.name\r\n        .split(' ')\r\n        .map((part) => part[0])\r\n        .join('')\r\n        .toLowerCase()\r\n      return initials.includes(searchTerm)\r\n    },\r\n    filter: {\r\n      type: CustomFilterType.TEXT,\r\n      matcher: (value: string, row: PersonModel) => row.id.includes(value),\r\n      placeholder: 'Contains',\r\n    },\r\n  },\r\n  {\r\n    propertyPath: 'name',\r\n    headerText: 'Name',\r\n    type: DataType.PLAIN_TEXT,\r\n    filterType: FilterType.EXACT_MATCH,\r\n  },\r\n  {\r\n    propertyPath: 'age',\r\n    headerText: 'Age',\r\n    type: DataType.NUMBER,\r\n    defaultWidth: '100px',\r\n    filterType: FilterType.EXACT_MATCH,\r\n  },\r\n  {\r\n    propertyPath: 'dateOfBirth',\r\n    headerText: 'Date of Birth',\r\n    type: DataType.DATE,\r\n    defaultWidth: '160px',\r\n    filterType: FilterType.RANGED,\r\n  },\r\n  {\r\n    propertyPath: 'favColor',\r\n    headerText: 'Favourite Colour',\r\n    type: DataType.COLOR,\r\n  },\r\n  {\r\n    propertyPath: 'income',\r\n    headerText: 'Annual Income',\r\n    type: DataType.MONEY,\r\n    filterType: FilterType.RANGED,\r\n  },\r\n  {\r\n    propertyPath: 'bio',\r\n    headerText: 'Bio',\r\n    type: DataType.RICH_TEXT,\r\n    defaultWidth: 'minmax(220px, 2fr)',\r\n  },\r\n  {\r\n    propertyPath: 'correspondingUserId',\r\n    headerText: 'Corresponding User',\r\n    type: DataType.RELATION,\r\n    relatedDataList: database.users,\r\n    render: (relatedData: UserModel) => (\r\n      <Link to={ROUTES.userDetails(relatedData.id)}>{relatedData.userName}</Link>\r\n    ),\r\n    searchMatcher: (_row: PersonModel, searchTerm: string, relatedDataItem: UserModel) =>\r\n      relatedDataItem.userName.toLowerCase().includes(searchTerm),\r\n    filter: {\r\n      type: CustomFilterType.DROPDOWN,\r\n      options: [\r\n        { text: 'In Group 1', value: '1' },\r\n        { text: 'In Group 2', value: '2' },\r\n      ],\r\n      isMultiple: true,\r\n      matcher: (value: string[], _row: PersonModel, relatedDataItem: UserModel) =>\r\n        value.includes(relatedDataItem.groupId),\r\n    },\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport './styles.scss'\r\n\r\nimport { FilterMap, Table } from '@nokacreative/generic-react-table'\r\nimport { columns } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\nimport { PersonModel } from '../../domain/person.model'\r\n\r\ntype Props = {\r\n  data: PersonModel[]\r\n  onSearch: (searchTerm: string) => void\r\n  onFilter: (currentFilters: FilterMap<PersonModel>) => void\r\n  isLoading: boolean\r\n  totalNumResults: number\r\n}\r\n\r\nexport const ServerHeaderSampleView = (props: Props) => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Server-Side Search and Filter Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            Use <code>useServerSideSearching</code> and <code>onSearch()</code> to run\r\n            searching on the server side. The search term passed to{' '}\r\n            <code>onSearch()</code> is the exact text, eg. whitepsace and case intact.\r\n          </p>\r\n          <p>\r\n            Similarly, use <code>useServerSideFiltering</code> and <code>onFilter()</code>{' '}\r\n            to run filtering on the server side. Filters are given in a map with the\r\n            filtered column&apos;s index (this will be the ordered index if columns are\r\n            orderable) as the key, and the column definition with the filter search term\r\n            as the value.\r\n          </p>\r\n          <p>\r\n            For simplicity, the fake server in this demo just returns one result with the{' '}\r\n            <em>Bio</em> column having data on what search/filtering was performed.\r\n          </p>\r\n        </>\r\n      }\r\n    >\r\n      <Table\r\n        pluralEntityName=\"people\"\r\n        columns={columns}\r\n        data={props.data}\r\n        isSearchable\r\n        useServerSideSearching\r\n        onSearch={props.onSearch}\r\n        tableName=\"People from Server\"\r\n        showResultCount\r\n        isFilterable\r\n        useServerSideFiltering\r\n        onFilter={props.onFilter}\r\n        isLoading={props.isLoading}\r\n        totalNumResults={props.totalNumResults}\r\n      />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\nimport { FilterMap } from '@nokacreative/generic-react-table'\n\nimport { PersonModel } from '../../domain/person.model'\nimport { fakeClient } from './fakeClient'\nimport { ServerResponse, ServerSearchParams } from './models'\nimport { ServerHeaderSampleView } from './view'\n\nexport const ServerHeaderSampleContainer = () => {\n  const [data, setData] = useState<PersonModel[]>([])\n  const [totalNumResults, setTotalNumResults] = useState<number>(0)\n  const [isLoading, setLoading] = useState<boolean>(true)\n  const currParams = useRef<ServerSearchParams>({\n    searchTerm: '',\n    filters: {},\n  })\n\n  function doFetch() {\n    fakeClient.searchPeople(currParams.current).then((response: ServerResponse) => {\n      setData(response.people)\n      setTotalNumResults(response.totalNumResults)\n      setLoading(false)\n    })\n  }\n\n  useEffect(() => {\n    doFetch()\n  }, [])\n\n  function onSearch(searchTerm: string) {\n    setLoading(true)\n    currParams.current.searchTerm = searchTerm\n    doFetch()\n  }\n\n  function onFilter(currentFilters: FilterMap<PersonModel>) {\n    setLoading(true)\n    currParams.current.filters = currentFilters\n    doFetch()\n  }\n\n  return (\n    <ServerHeaderSampleView\n      data={data}\n      onSearch={onSearch}\n      onFilter={onFilter}\n      isLoading={isLoading}\n      totalNumResults={totalNumResults}\n    />\n  )\n}\n","import { Link } from 'react-router-dom'\nimport { database } from '../../assets/database'\nimport { ROUTES } from '../../assets/routes'\nimport {\n  TableColumn,\n  DataType,\n  FilterType,\n  CustomFilterType,\n} from '@nokacreative/generic-react-table'\nimport { MasterModel } from '../../domain/master.model'\nimport { PersonModel } from '../../domain/person.model'\n\nexport const columns: TableColumn<MasterModel>[] = [\n  {\n    propertyPath: 'plainText',\n    headerText: 'Plain Text (Num sort)',\n    type: DataType.PLAIN_TEXT,\n    filterType: FilterType.PARTIAL_MATCH,\n    isSortable: true,\n    defaultWidth: '100px',\n    sortAccessor: (row: MasterModel) => parseInt(row.plainText.slice(1)),\n  },\n  {\n    propertyPath: 'richText',\n    headerText: 'Rich Text',\n    type: DataType.RICH_TEXT,\n    isResizable: true,\n  },\n  {\n    propertyPath: 'relation',\n    headerText: 'Relation (Age match)',\n    type: DataType.RELATION,\n    relatedDataList: database.people,\n    isResizable: true,\n    render: (relatedData: PersonModel) => (\n      <>\n        <Link to={ROUTES.personDetails(relatedData.id)}>{relatedData.name}</Link>\n        <br />\n        <small>Age: {relatedData.age}</small>\n      </>\n    ),\n    searchMatcher: (\n      _row: MasterModel,\n      searchTerm: string,\n      relatedDataItem: PersonModel\n    ) => relatedDataItem.name.toLowerCase().includes(searchTerm),\n    filter: {\n      type: CustomFilterType.NUMBER,\n      isRanged: true,\n      matcher: (\n        min: number | '',\n        max: number | '',\n        _row: MasterModel,\n        relatedDataItem: PersonModel\n      ) =>\n        (min ? relatedDataItem.age >= min : true) &&\n        (max ? relatedDataItem.age <= max : true),\n    },\n  },\n  {\n    propertyPath: 'date.min',\n    headerText: 'Date (Min Filter)',\n    type: DataType.DATE,\n    filterType: FilterType.MINIMUM,\n    isSortable: true,\n  },\n  {\n    propertyPath: 'date.max',\n    headerText: 'Date (Max Filter)',\n    type: DataType.DATE,\n    filterType: FilterType.MAXIMUM,\n    showTime: true,\n    defaultWidth: 'max-content',\n    isSortable: true,\n  },\n  {\n    propertyPath: 'date.exact',\n    headerText: 'Date (Exact Filter)',\n    type: DataType.DATE,\n    filterType: FilterType.EXACT_MATCH,\n    showTime: true,\n    showSeconds: true,\n    defaultWidth: 'max-content',\n    isSortable: true,\n  },\n  {\n    propertyPath: 'color',\n    headerText: 'Color',\n    type: DataType.COLOR,\n    defaultWidth: '130px',\n    filterIsMultiple: true,\n  },\n  {\n    propertyPath: 'numberMin',\n    headerText: 'Number (Min Filter)',\n    type: DataType.NUMBER,\n    filterType: FilterType.MINIMUM,\n    isSortable: true,\n  },\n  {\n    propertyPath: 'numberMax',\n    headerText: 'Number (Max Filter)',\n    type: DataType.NUMBER,\n    filterType: FilterType.MAXIMUM,\n    isSortable: true,\n  },\n  {\n    propertyPath: 'numberRanged',\n    headerText: 'Number (Ranged Filter)',\n    type: DataType.NUMBER,\n    filterType: FilterType.RANGED,\n    isSortable: true,\n  },\n  {\n    propertyPath: 'moneyMin',\n    headerText: 'Money (Min Filter)',\n    type: DataType.MONEY,\n    filterType: FilterType.MINIMUM,\n    isSortable: true,\n    defaultWidth: '115px',\n  },\n  {\n    propertyPath: 'moneyMax',\n    headerText: 'Money (Max Filter)',\n    type: DataType.MONEY,\n    filterType: FilterType.MAXIMUM,\n    isSortable: true,\n    defaultWidth: '115px',\n  },\n]\n","/**\n * Taken from here:\n * https://gist.github.com/keeguon/2310008\n */\nexport const countries = [\n  { name: 'Afghanistan', code: 'AF' },\n  { name: 'Åland Islands', code: 'AX' },\n  { name: 'Albania', code: 'AL' },\n  { name: 'Algeria', code: 'DZ' },\n  { name: 'American Samoa', code: 'AS' },\n  { name: 'AndorrA', code: 'AD' },\n  { name: 'Angola', code: 'AO' },\n  { name: 'Anguilla', code: 'AI' },\n  { name: 'Antarctica', code: 'AQ' },\n  { name: 'Antigua and Barbuda', code: 'AG' },\n  { name: 'Argentina', code: 'AR' },\n  { name: 'Armenia', code: 'AM' },\n  { name: 'Aruba', code: 'AW' },\n  { name: 'Australia', code: 'AU' },\n  { name: 'Austria', code: 'AT' },\n  { name: 'Azerbaijan', code: 'AZ' },\n  { name: 'Bahamas', code: 'BS' },\n  { name: 'Bahrain', code: 'BH' },\n  { name: 'Bangladesh', code: 'BD' },\n  { name: 'Barbados', code: 'BB' },\n  { name: 'Belarus', code: 'BY' },\n  { name: 'Belgium', code: 'BE' },\n  { name: 'Belize', code: 'BZ' },\n  { name: 'Benin', code: 'BJ' },\n  { name: 'Bermuda', code: 'BM' },\n  { name: 'Bhutan', code: 'BT' },\n  { name: 'Bolivia', code: 'BO' },\n  { name: 'Bosnia and Herzegovina', code: 'BA' },\n  { name: 'Botswana', code: 'BW' },\n  { name: 'Bouvet Island', code: 'BV' },\n  { name: 'Brazil', code: 'BR' },\n  { name: 'British Indian Ocean Territory', code: 'IO' },\n  { name: 'Brunei Darussalam', code: 'BN' },\n  { name: 'Bulgaria', code: 'BG' },\n  { name: 'Burkina Faso', code: 'BF' },\n  { name: 'Burundi', code: 'BI' },\n  { name: 'Cambodia', code: 'KH' },\n  { name: 'Cameroon', code: 'CM' },\n  { name: 'Canada', code: 'CA' },\n  { name: 'Cape Verde', code: 'CV' },\n  { name: 'Cayman Islands', code: 'KY' },\n  { name: 'Central African Republic', code: 'CF' },\n  { name: 'Chad', code: 'TD' },\n  { name: 'Chile', code: 'CL' },\n  { name: 'China', code: 'CN' },\n  { name: 'Christmas Island', code: 'CX' },\n  { name: 'Cocos (Keeling) Islands', code: 'CC' },\n  { name: 'Colombia', code: 'CO' },\n  { name: 'Comoros', code: 'KM' },\n  { name: 'Congo', code: 'CG' },\n  { name: 'Congo, The Democratic Republic of the', code: 'CD' },\n  { name: 'Cook Islands', code: 'CK' },\n  { name: 'Costa Rica', code: 'CR' },\n  { name: \"Cote D'Ivoire\", code: 'CI' },\n  { name: 'Croatia', code: 'HR' },\n  { name: 'Cuba', code: 'CU' },\n  { name: 'Cyprus', code: 'CY' },\n  { name: 'Czech Republic', code: 'CZ' },\n  { name: 'Denmark', code: 'DK' },\n  { name: 'Djibouti', code: 'DJ' },\n  { name: 'Dominica', code: 'DM' },\n  { name: 'Dominican Republic', code: 'DO' },\n  { name: 'Ecuador', code: 'EC' },\n  { name: 'Egypt', code: 'EG' },\n  { name: 'El Salvador', code: 'SV' },\n  { name: 'Equatorial Guinea', code: 'GQ' },\n  { name: 'Eritrea', code: 'ER' },\n  { name: 'Estonia', code: 'EE' },\n  { name: 'Ethiopia', code: 'ET' },\n  { name: 'Falkland Islands (Malvinas)', code: 'FK' },\n  { name: 'Faroe Islands', code: 'FO' },\n  { name: 'Fiji', code: 'FJ' },\n  { name: 'Finland', code: 'FI' },\n  { name: 'France', code: 'FR' },\n  { name: 'French Guiana', code: 'GF' },\n  { name: 'French Polynesia', code: 'PF' },\n  { name: 'French Southern Territories', code: 'TF' },\n  { name: 'Gabon', code: 'GA' },\n  { name: 'Gambia', code: 'GM' },\n  { name: 'Georgia', code: 'GE' },\n  { name: 'Germany', code: 'DE' },\n  { name: 'Ghana', code: 'GH' },\n  { name: 'Gibraltar', code: 'GI' },\n  { name: 'Greece', code: 'GR' },\n  { name: 'Greenland', code: 'GL' },\n  { name: 'Grenada', code: 'GD' },\n  { name: 'Guadeloupe', code: 'GP' },\n  { name: 'Guam', code: 'GU' },\n  { name: 'Guatemala', code: 'GT' },\n  { name: 'Guernsey', code: 'GG' },\n  { name: 'Guinea', code: 'GN' },\n  { name: 'Guinea-Bissau', code: 'GW' },\n  { name: 'Guyana', code: 'GY' },\n  { name: 'Haiti', code: 'HT' },\n  { name: 'Heard Island and Mcdonald Islands', code: 'HM' },\n  { name: 'Holy See (Vatican City State)', code: 'VA' },\n  { name: 'Honduras', code: 'HN' },\n  { name: 'Hong Kong', code: 'HK' },\n  { name: 'Hungary', code: 'HU' },\n  { name: 'Iceland', code: 'IS' },\n  { name: 'India', code: 'IN' },\n  { name: 'Indonesia', code: 'ID' },\n  { name: 'Iran, Islamic Republic Of', code: 'IR' },\n  { name: 'Iraq', code: 'IQ' },\n  { name: 'Ireland', code: 'IE' },\n  { name: 'Isle of Man', code: 'IM' },\n  { name: 'Israel', code: 'IL' },\n  { name: 'Italy', code: 'IT' },\n  { name: 'Jamaica', code: 'JM' },\n  { name: 'Japan', code: 'JP' },\n  { name: 'Jersey', code: 'JE' },\n  { name: 'Jordan', code: 'JO' },\n  { name: 'Kazakhstan', code: 'KZ' },\n  { name: 'Kenya', code: 'KE' },\n  { name: 'Kiribati', code: 'KI' },\n  { name: \"Korea, Democratic People'S Republic of\", code: 'KP' },\n  { name: 'Korea, Republic of', code: 'KR' },\n  { name: 'Kuwait', code: 'KW' },\n  { name: 'Kyrgyzstan', code: 'KG' },\n  { name: \"Lao People'S Democratic Republic\", code: 'LA' },\n  { name: 'Latvia', code: 'LV' },\n  { name: 'Lebanon', code: 'LB' },\n  { name: 'Lesotho', code: 'LS' },\n  { name: 'Liberia', code: 'LR' },\n  { name: 'Libyan Arab Jamahiriya', code: 'LY' },\n  { name: 'Liechtenstein', code: 'LI' },\n  { name: 'Lithuania', code: 'LT' },\n  { name: 'Luxembourg', code: 'LU' },\n  { name: 'Macao', code: 'MO' },\n  { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' },\n  { name: 'Madagascar', code: 'MG' },\n  { name: 'Malawi', code: 'MW' },\n  { name: 'Malaysia', code: 'MY' },\n  { name: 'Maldives', code: 'MV' },\n  { name: 'Mali', code: 'ML' },\n  { name: 'Malta', code: 'MT' },\n  { name: 'Marshall Islands', code: 'MH' },\n  { name: 'Martinique', code: 'MQ' },\n  { name: 'Mauritania', code: 'MR' },\n  { name: 'Mauritius', code: 'MU' },\n  { name: 'Mayotte', code: 'YT' },\n  { name: 'Mexico', code: 'MX' },\n  { name: 'Micronesia, Federated States of', code: 'FM' },\n  { name: 'Moldova, Republic of', code: 'MD' },\n  { name: 'Monaco', code: 'MC' },\n  { name: 'Mongolia', code: 'MN' },\n  { name: 'Montserrat', code: 'MS' },\n  { name: 'Morocco', code: 'MA' },\n  { name: 'Mozambique', code: 'MZ' },\n  { name: 'Myanmar', code: 'MM' },\n  { name: 'Namibia', code: 'NA' },\n  { name: 'Nauru', code: 'NR' },\n  { name: 'Nepal', code: 'NP' },\n  { name: 'Netherlands', code: 'NL' },\n  { name: 'Netherlands Antilles', code: 'AN' },\n  { name: 'New Caledonia', code: 'NC' },\n  { name: 'New Zealand', code: 'NZ' },\n  { name: 'Nicaragua', code: 'NI' },\n  { name: 'Niger', code: 'NE' },\n  { name: 'Nigeria', code: 'NG' },\n  { name: 'Niue', code: 'NU' },\n  { name: 'Norfolk Island', code: 'NF' },\n  { name: 'Northern Mariana Islands', code: 'MP' },\n  { name: 'Norway', code: 'NO' },\n  { name: 'Oman', code: 'OM' },\n  { name: 'Pakistan', code: 'PK' },\n  { name: 'Palau', code: 'PW' },\n  { name: 'Palestinian Territory, Occupied', code: 'PS' },\n  { name: 'Panama', code: 'PA' },\n  { name: 'Papua New Guinea', code: 'PG' },\n  { name: 'Paraguay', code: 'PY' },\n  { name: 'Peru', code: 'PE' },\n  { name: 'Philippines', code: 'PH' },\n  { name: 'Pitcairn', code: 'PN' },\n  { name: 'Poland', code: 'PL' },\n  { name: 'Portugal', code: 'PT' },\n  { name: 'Puerto Rico', code: 'PR' },\n  { name: 'Qatar', code: 'QA' },\n  { name: 'Reunion', code: 'RE' },\n  { name: 'Romania', code: 'RO' },\n  { name: 'Russian Federation', code: 'RU' },\n  { name: 'RWANDA', code: 'RW' },\n  { name: 'Saint Helena', code: 'SH' },\n  { name: 'Saint Kitts and Nevis', code: 'KN' },\n  { name: 'Saint Lucia', code: 'LC' },\n  { name: 'Saint Pierre and Miquelon', code: 'PM' },\n  { name: 'Saint Vincent and the Grenadines', code: 'VC' },\n  { name: 'Samoa', code: 'WS' },\n  { name: 'San Marino', code: 'SM' },\n  { name: 'Sao Tome and Principe', code: 'ST' },\n  { name: 'Saudi Arabia', code: 'SA' },\n  { name: 'Senegal', code: 'SN' },\n  { name: 'Serbia and Montenegro', code: 'CS' },\n  { name: 'Seychelles', code: 'SC' },\n  { name: 'Sierra Leone', code: 'SL' },\n  { name: 'Singapore', code: 'SG' },\n  { name: 'Slovakia', code: 'SK' },\n  { name: 'Slovenia', code: 'SI' },\n  { name: 'Solomon Islands', code: 'SB' },\n  { name: 'Somalia', code: 'SO' },\n  { name: 'South Africa', code: 'ZA' },\n  { name: 'South Georgia and the South Sandwich Islands', code: 'GS' },\n  { name: 'Spain', code: 'ES' },\n  { name: 'Sri Lanka', code: 'LK' },\n  { name: 'Sudan', code: 'SD' },\n  { name: 'Suriname', code: 'SR' },\n  { name: 'Svalbard and Jan Mayen', code: 'SJ' },\n  { name: 'Swaziland', code: 'SZ' },\n  { name: 'Sweden', code: 'SE' },\n  { name: 'Switzerland', code: 'CH' },\n  { name: 'Syrian Arab Republic', code: 'SY' },\n  { name: 'Taiwan, Province of China', code: 'TW' },\n  { name: 'Tajikistan', code: 'TJ' },\n  { name: 'Tanzania, United Republic of', code: 'TZ' },\n  { name: 'Thailand', code: 'TH' },\n  { name: 'Timor-Leste', code: 'TL' },\n  { name: 'Togo', code: 'TG' },\n  { name: 'Tokelau', code: 'TK' },\n  { name: 'Tonga', code: 'TO' },\n  { name: 'Trinidad and Tobago', code: 'TT' },\n  { name: 'Tunisia', code: 'TN' },\n  { name: 'Turkey', code: 'TR' },\n  { name: 'Turkmenistan', code: 'TM' },\n  { name: 'Turks and Caicos Islands', code: 'TC' },\n  { name: 'Tuvalu', code: 'TV' },\n  { name: 'Uganda', code: 'UG' },\n  { name: 'Ukraine', code: 'UA' },\n  { name: 'United Arab Emirates', code: 'AE' },\n  { name: 'United Kingdom', code: 'GB' },\n  { name: 'United States', code: 'US' },\n  { name: 'United States Minor Outlying Islands', code: 'UM' },\n  { name: 'Uruguay', code: 'UY' },\n  { name: 'Uzbekistan', code: 'UZ' },\n  { name: 'Vanuatu', code: 'VU' },\n  { name: 'Venezuela', code: 'VE' },\n  { name: 'Viet Nam', code: 'VN' },\n  { name: 'Virgin Islands, British', code: 'VG' },\n  { name: 'Virgin Islands, U.S.', code: 'VI' },\n  { name: 'Wallis and Futuna', code: 'WF' },\n  { name: 'Western Sahara', code: 'EH' },\n  { name: 'Yemen', code: 'YE' },\n  { name: 'Zambia', code: 'ZM' },\n  { name: 'Zimbabwe', code: 'ZW' },\n]\n","import { database } from '../../assets/database'\r\nimport { MasterModel } from '../../domain/master.model'\r\nimport { countries } from './countries'\r\n\r\n// ====================================================================== //\r\n// Utils\r\n// ====================================================================== //\r\n\r\nconst MIN_RANDOM_DATE = new Date(1990, 1, 1).getTime()\r\nconst MAX_RANDOM_DATE = new Date().getTime()\r\n\r\nfunction generateRandomDate() {\r\n  return new Date(\r\n    MIN_RANDOM_DATE + Math.random() * (MAX_RANDOM_DATE - MIN_RANDOM_DATE)\r\n  ).getTime()\r\n}\r\n\r\nconst MIN_RANDOM_NUMBER = 0\r\nconst MAX_RANDOM_NUMBER = 1000\r\n\r\nfunction generateRandomNumber() {\r\n  const n = Math.random() * (MAX_RANDOM_NUMBER - MIN_RANDOM_NUMBER) + MIN_RANDOM_NUMBER\r\n  return Math.round((n + Number.EPSILON) * 100) / 100\r\n}\r\n\r\nfunction generateRandomColor() {\r\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`\r\n}\r\n\r\nfunction pickRandomFromArray<T>(arr: T[]): T {\r\n  return arr[Math.floor(Math.random() * arr.length)]\r\n}\r\n\r\n// ====================================================================== //\r\n// Generation\r\n// ====================================================================== //\r\n\r\nconst peopleIds = database.people.map((p) => p.id)\r\n\r\nexport const data: MasterModel[] = Array.from({ length: 30 }).map((_, i) => {\r\n  const randomCountry = pickRandomFromArray(countries)\r\n  return {\r\n    plainText: `#${i + 1}`,\r\n    richText: `<b>${randomCountry.name}</b><br /><small>${randomCountry.code}</small>`,\r\n    relation: pickRandomFromArray(peopleIds),\r\n    date: {\r\n      min: generateRandomDate(),\r\n      max: generateRandomDate(),\r\n      exact: generateRandomDate(),\r\n    },\r\n    custom: '',\r\n    numberMin: generateRandomNumber(),\r\n    numberMax: generateRandomNumber(),\r\n    numberRanged: generateRandomNumber(),\r\n    moneyMin: generateRandomNumber(),\r\n    moneyMax: generateRandomNumber(),\r\n    color: generateRandomColor(),\r\n  }\r\n})\r\n","import React from 'react'\r\n\r\nimport { Table } from '@nokacreative/generic-react-table'\r\nimport { columns } from './columns'\r\nimport { data } from './data'\r\nimport { SamplePage } from '../../common/samplePage'\r\n\r\nexport const MasterSample = () => {\r\n  return (\r\n    <SamplePage\r\n      headerText=\"Master Sample\"\r\n      description={\r\n        <>\r\n          <p>\r\n            This demo contains all the column types, and all available functionality. It\r\n            also contains all filter types that were previously not shown.\r\n          </p>\r\n          All data is randomly generated.\r\n        </>\r\n      }\r\n    >\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        isSearchable\r\n        tableName=\"People\"\r\n        showResultCount\r\n        showFilteredResultCount\r\n        isFilterable\r\n        usePaging\r\n        defaultPageSize={5}\r\n        pageSizeOptions={[3, 5, 10, 15, 20]}\r\n        canReorderColumns\r\n        numPinnedColumns={1}\r\n      />\r\n    </SamplePage>\r\n  )\r\n}\r\n","import { TableColumn, DataType } from '@nokacreative/generic-react-table'\r\nimport { TagModel } from '../../domain/tag.model'\r\n\r\nexport const columns: TableColumn<TagModel>[] = [\r\n  {\r\n    propertyPath: 'id',\r\n    headerText: 'ID',\r\n    type: DataType.PLAIN_TEXT,\r\n    defaultWidth: '100px',\r\n  },\r\n  {\r\n    propertyPath: 'name',\r\n    headerText: 'Name',\r\n    type: DataType.PLAIN_TEXT,\r\n    isSortable: true,\r\n    isResizable: true,\r\n  },\r\n  {\r\n    propertyPath: 'color',\r\n    headerText: 'Colour',\r\n    type: DataType.COLOR,\r\n    defaultWidth: '120px',\r\n  },\r\n  {\r\n    propertyPath: 'description',\r\n    headerText: 'Description',\r\n    type: DataType.PLAIN_TEXT,\r\n    defaultWidth: '2fr',\r\n  },\r\n]\r\n","import React from 'react'\nimport { Table } from '@nokacreative/generic-react-table'\n\nimport './styles.scss'\n\nimport { database } from '../../assets/database'\nimport { columns } from './data'\nimport { SamplePage } from '../../common/samplePage'\n\nconst PopulatedTable = ({ id, name }: { id: string; name: string }) => (\n  <Table\n    pluralEntityName=\"tags\"\n    columns={columns}\n    data={database.tags}\n    tableName={name}\n    usePaging\n    pageSizeOptions={[1, 3]}\n    defaultPageSize={3}\n    showResultCount\n    isSearchable\n    isFilterable\n    numPinnedColumns={1}\n    id={id}\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    onRowSelected={() => {}}\n    keepSelections\n  />\n)\n\nexport const StyleOverridesSample = () => (\n  <SamplePage\n    headerText=\"Style Overrides Sample\"\n    description={\n      <>\n        All colours are defined as CSS variables and scoped under the{' '}\n        <code>noka-table-colors</code> class. By simply overriding that class&apos;s\n        variables, the table&apos;s colours can be customized to your liking.\n      </>\n    }\n  >\n    <PopulatedTable name=\"Blue-Gray scheme\" id=\"blue-gray-scheme\" />\n    <PopulatedTable name=\"Dark theme\" id=\"dark-theme-table\" />\n  </SamplePage>\n)\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport './styles.scss'\n\nimport { ID_PARAM_PLACEHOLDER, ROUTES } from '../assets/routes'\nimport { GroupDetalis } from '../pages/groupDetails'\nimport { GroupsTable } from '../pages/groupsTable'\nimport { UserDetalis } from '../pages/userDetails'\nimport { UsersTable } from '../pages/usersTable'\nimport { TagsTable } from '../pages/tagsTable'\nimport { ProductsTable } from '../pages/productsTable'\nimport { SelectionSample } from '../pages/selectionSample'\nimport { ServerSampleContainer } from '../pages/serverSample'\nimport { HeaderSample } from '../pages/headerSample'\nimport { PersonDetalis } from '../pages/personDetails'\nimport { ServerHeaderSample } from '../pages/serverHeaderSample'\nimport { MasterSample } from '../pages/masterSample'\nimport { StyleOverridesSample } from '../pages/styleOverridesSample'\n\nexport const Entry = () => (\n  <Router basename=\"/\">\n    <div id=\"links\">\n      <p>Select the sample you would like to view:</p>\n      <Link to={ROUTES.usersTable}>Simple</Link>\n      <Link to={ROUTES.groupsTable}>Column Sorting and Resizing</Link>\n      <Link to={ROUTES.tagsTable}>Pinned Columns and Column Reordering</Link>\n      <Link to={ROUTES.productsTable}>Minimum Number of Rows and Paging</Link>\n      <Link to={ROUTES.selectionSample}>Row Selection</Link>\n      <Link to={ROUTES.serverSample}>Server-side Paging and Sorting</Link>\n      <Link to={ROUTES.headerSample}>Search and Filter</Link>\n      <Link to={ROUTES.serverHeaderSample}>Server-side Search and Filter</Link>\n      <Link to={ROUTES.masterSample}>Master Sample</Link>\n      <Link to={ROUTES.styleSample}>Overriding Styles</Link>\n    </div>\n    <main>\n      <Switch>\n        <Route path={ROUTES.usersTable} component={UsersTable} />\n        <Route path={ROUTES.groupsTable} component={GroupsTable} />\n        <Route path={ROUTES.tagsTable} component={TagsTable} />\n        <Route path={ROUTES.productsTable} component={ProductsTable} />\n        <Route path={ROUTES.selectionSample} component={SelectionSample} />\n        <Route path={ROUTES.serverSample} component={ServerSampleContainer} />\n        <Route path={ROUTES.headerSample} component={HeaderSample} />\n        <Route path={ROUTES.serverHeaderSample} component={ServerHeaderSample} />\n        <Route path={ROUTES.masterSample} component={MasterSample} />\n        <Route path={ROUTES.userDetails(ID_PARAM_PLACEHOLDER)} component={UserDetalis} />\n        <Route\n          path={ROUTES.groupDetails(ID_PARAM_PLACEHOLDER)}\n          component={GroupDetalis}\n        />\n        <Route\n          path={ROUTES.personDetails(ID_PARAM_PLACEHOLDER)}\n          component={PersonDetalis}\n        />\n        <Route path={ROUTES.styleSample} component={StyleOverridesSample} />\n      </Switch>\n    </main>\n  </Router>\n)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Entry } from './entry'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Entry />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}